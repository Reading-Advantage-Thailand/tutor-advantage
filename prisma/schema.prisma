generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  role     Role      @default(GUEST)

  parentId String?
  parent   User?   @relation("UserParent", fields: [parentId], references: [id])
  children User[]  @relation("UserParent")

  Post Post[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  classesCreated Class[]       @relation("TutorClasses")
  classMembers   ClassMember[]

  invitationsSent     Invitation[] @relation("InvitationsSent")
  invitationsReceived Invitation[] @relation("InvitationsReceived")

  @@map(name: "users")
}

enum Role {
  STUDENT
  TUTOR
  SYSTEM
  GUEST
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Channel {
  id        String   @id @default(cuid())
  name      String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  post      Post[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([classId, name])
}

model Class {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  icon        String?
  description String
  code        String        @unique @db.VarChar(7)
  tutorId     String
  tutor       User          @relation("TutorClasses", fields: [tutorId], references: [id])
  students    ClassMember[]
  channels    Channel[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model ClassMember {
  id      String @id @default(cuid())
  userId  String
  classId String
  user    User   @relation(fields: [userId], references: [id])
  class   Class  @relation(fields: [classId], references: [id])

  role ClassMemberRole @default(MEMBER)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

enum ClassMemberRole {
  OWNER
  CO_OWNER
  MEMBER
}

model Invitation {
  id        String @id @default(cuid())
  code      String @unique @db.VarChar(6)
  inviterId String
  inviter   User   @relation("InvitationsSent", fields: [inviterId], references: [id], onDelete: Cascade)

  recipientId String?
  recipient   User?   @relation("InvitationsReceived", fields: [recipientId], references: [id])

  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String
  channelId String

  author  User    @relation(fields: [authorId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id])

  @@map(name: "posts")
}
